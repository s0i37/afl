--- syscall_orig.c	2019-12-27 17:51:24.532317538 +0500
+++ qemu-2.10.0/linux-user/syscall.c	2019-12-27 22:40:13.992341174 +0500
@@ -116,6 +116,14 @@
 
 #include "qemu.h"
 
+extern unsigned int afl_forksrv_pid;
+extern struct Childs {
+  char signal_stop;
+  unsigned int PIDs[100];
+  unsigned int count;
+} *childs;
+FILE *f = 0;
+
 #ifndef CLONE_IO
 #define CLONE_IO                0x80000000      /* Clone io context */
 #endif
@@ -9812,6 +9820,8 @@
         ret = get_errno(do_fork(cpu_env, arg2, arg1, arg3, arg5, arg4));
 #else
         ret = get_errno(do_fork(cpu_env, arg1, arg2, arg3, arg5, arg4));
+        if(childs && ret)
+          childs->PIDs[childs->count++] = ret;
 #endif
         break;
 #ifdef __NR_exit_group
@@ -11688,8 +11698,21 @@
         break;
 
     case TARGET_NR_tgkill:
-        ret = get_errno(safe_tgkill((int)arg1, (int)arg2,
-                        target_to_host_signal(arg3)));
+
+        {
+          int pid  = (int)arg1,
+              tgid = (int)arg2,
+              sig  = (int)arg3;
+
+          /* Not entirely sure if the below is correct for all architectures. */
+
+          if(afl_forksrv_pid && afl_forksrv_pid == pid && sig == SIGABRT)
+              pid = tgid = getpid();
+
+          ret = get_errno(safe_tgkill(pid, tgid, target_to_host_signal(sig)));
+
+        }
+
         break;
 
 #ifdef TARGET_NR_set_robust_list
